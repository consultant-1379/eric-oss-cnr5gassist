#
# COPYRIGHT Ericsson 2021
#
#
#
# The copyright to the computer program(s) herein is the property of
#
# Ericsson Inc. The programs may be used and/or copied only with written
#
# permission from Ericsson Inc. or in accordance with the terms and
#
# conditions stipulated in the agreement/contract under which the
#
# program(s) have been supplied.
#


modelVersion: 2.0

description: "Ericsson Java Spring Boot Supporting LTE to 5G FR2 cell relationship creation. It provides the information needed by the LTE nodes for ANR on the node to work with 5G FR2 cells"

# See image catalog: https://confluence.lmera.ericsson.se/display/ACD/ADP+CICD+Docker+Image+Catalog
docker-images:
  - adp-asciidoc-builder: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-asciidocbuilder:${env.ASCII_DOC_BUILDER_TAG}
  - adp-doc-builder: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-docbuilder:${env.DOC_BUILDER_TAG}
  - adp-helm-dr-check: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/common-library-adp-helm-dr-check:${env.HELM_DR_CHECK_TAG}
  - adp-helm-kubectl: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-py3kubehelmbuilder:${env.HELM_KUBECTL_TAG}
  - adp-image-dr-check: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/adp-image-dr-check:${env.IMAGE_DR_CHECK_TAG}
  - adp-maven-builder: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-java17mvnbuilder:${env.MVN_BUILDER_TAG}
  - adp-release-auto: armdocker.rnd.ericsson.se/proj-adp-cicd-drop/bob-adp-release-auto:${env.RELEASE_AUTO_TAG}
  - elib-make-utilities: ${elib-make-subpath}-oss-drop/eric-elib/elib_makeutilities:${env.ELIB_MAKE_UTILITIES_TAG}
  - bth-linter: armdocker.rnd.ericsson.se/proj-eric-oss-drop/eric-bth/eric-bth-spectral-linter:${env.BTH_LINTER_TAG}
  - custom-helm-install: autoapp-py3kubehelmbuilder:latest
  - bob-py3-kube-helm-builder: armdocker.rnd.ericsson.se/proj-eric-oss-dev/bob-py3kubehelmbuilder-awscli:latest

import:
  common: common-properties.yaml
  va-ruleset: ci/VA-ruleset2.0.yaml

# List of constants
properties:
  - elib-make-subpath: armdocker.rnd.ericsson.se/proj-eric
  - image-registry-path: armdocker.rnd.ericsson.se/proj-eric-oss
  - image-secret: armdocker
  - image-dev-repopath: ${image-registry-path}-dev
  - image-ci-repopath: ${image-registry-path}-ci-internal
  - image-drop-repopath: ${image-registry-path}-drop
  - image-full-name: ${image-drop-repopath}/${common.docker-image-name}

  # Helm Chart name must follow the pattern: eric-[a-z0-9]{1,5}-[a-z0-9-]{1,30}
  - helm-chart-repo-server-path: https://arm.seli.gic.ericsson.se/artifactory/proj-eric-oss
  - helm-chart-dev-repopath: ${helm-chart-repo-server-path}-dev-helm
  - helm-chart-ci-repopath: ${helm-chart-repo-server-path}-ci-internal-helm
  - helm-chart-drop-repo: ${helm-chart-repo-server-path}-drop-helm

  # Generic repository for publishing artifacts such as documentation
  - generic-drop-repo: ${helm-chart-repo-server-path}-drop-generic

  # Functional ID for your Team or CI group to push to Gerrit repo
  - git-user: ossadmin
  - git-user-email: ${git-user}@ericsson.com
  - git-repo-path: OSS/com.ericsson.oss.apps/eric-oss-cnr5gassist
  - git-repo-url: ssh://${git-user}@gerrit.ericsson.se:29418/${git-repo-path}
  - git-repo: https://gerrit.ericsson.se/#/admin/projects/${git-repo-path}
  - git-repo-url-http: https://gerrit.ericsson.se/${git-repo-path}.git
  - git-clone-url: https://${git-user}@gerrit.ericsson.se/a/OSS/com.ericsson.oss.apps/eric-oss-cnr5gassist
  - enabled-helm-design-rules: "-DhelmDesignRule.config.drHc011=enable -DhelmDesignRule.config.DR-D1120-045-AD=enable -DhelmDesignRule.config.DR-D1123-113=disable"

  # FOSSA
  - fossa-server-endpoint: https://scasfossa.internal.ericsson.com
  - fossa-ci-repopath: ${helm-chart-repo-server-path}-dev-generic-local/fossa
  - fossa-service-name: ${common.helm-chart-name}
  - fossa-scan-report-artifact-path: ${fossa-ci-repopath}/${fossa-service-name}
  - fossa-scan-artifact-file-name: ${fossa-service-name}-${var.commithash}.tgz
  - fossa-project-name: ${common.helm-chart-name}
  - fossa-report-name: fossa-report.json
  - dependency-file-name: ${common.dependencies-file-path}
  - fossa-team-name: eric-oss-aether
  - fossa-config-location: ${env.PWD}/.fossa.yml
  - docker-params: "--workdir ${env.PWD}"

  # Marketplace Documentation Location
  - doc-arm-dev-repo: https://arm.seli.gic.ericsson.se/artifactory/proj-eric-oss-dev-generic-local/eric-oss-cnr5gassist
  - doc-arm-release-repo: https://arm.seli.gic.ericsson.se/artifactory/proj-eric-oss-released-generic-local/eric-oss-cnr5gassist

  # Docker Flags
  - docker-user-mount: &docker-user-mount [ "--volume ${env.HOME}:${env.HOME}", "--env HOME=${env.HOME}" ]
  - aws-credential-mount: &aws-credential-mount [ "--volume ${env.KUBE_HOME}:${env.HOME}/.kube/", "--volume ${env.AWS_HOME}:${env.HOME}/.aws/", "--volume ${env.CACHE_HOME}:${env.HOME}/.cache/", "--env HOME=${env.HOME}" ]

  # Cache files
  - var-revision: "./.bob/var.revision"
  - helm-instances: "./.bob/helm_instances.json"
  - idun-instance-info: "./.bob/idun_instance.json"
  - idun-instance-globals: "./.bob/global_values.yaml"

  # Command Switches
  - yq-arguments: "--arg name ${env.CHART_NAME} --arg version ${env.CHART_VERSION} --arg repo ${env.CHART_REPO}"
  - idun-instance-globals-regex: ".global | {global: .}"

  # eiap_utils.py location
  - eiap-utils-path: "src/test/resources/utils/"

  # truncated version number for release
  - release-version: $(echo ${var.version} | cut -d . -f -2).0

# import environment variables (For example: Jenkins parameters)
env:
  # Environment Related
  - DOCKER_NETWORK (default=--network host)
  - HOME
  - MAVEN_CLI_OPTS (default=-Duser.home=${env.HOME} -B)
  - MAVEN_OPTS (default=-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn)
  - PWD
  - RELEASE (default=false)
  - DOCKER_VOLUME_MAPPING_PASSWD (default=--volume ${env.HOME}/mypasswd:/etc/passwd:ro)
  - GERRIT_PATCHSET_REVISION (default=HEAD)
  - GERRIT_REPO (default=${common.gerrit-repo-name})
  - PRI_PREPARED (default=adpauto)
  - PRI_APPROVER (default="ECHAAUR")
  - PRI_RESPONSIBLE (default="ECHAAUR")
  - BUILD_NUMBER    (default="")
  - AWS_HOME                (default=${env.HOME}/.aws/)
  - KUBE_HOME               (default=${env.HOME}/.kube/)
  - CACHE_HOME              (default=${env.HOME}/.cache/)
  - HELMCONFIG              (default=./.bob/repositories.yaml)
  - CLUSTER_NAME            (default=${common.helm-chart-name}-${var.commithash})
  - GERRIT_BRANCH           (default=master)
  - BOB_FORCE_IMAGE_PULL    (default=false)
  - DEBUG                   (default="")
  - FORCEUPDATE             (default="")

  # Kubernetes
  - COLLECT_LOGS_SCRIPT_LOCATION (default="https://arm.sero.gic.ericsson.se/artifactory/proj-ADP_GS_Support_FTP-generic-local/collect_ADP_logs")
  - COLLECT_LOGS_SCRIPT_FILE_NAME (default="collect_ADP_logs.sh")
  - COLLECT_LOGS_SINCE_RELATIVE_TIME (default="2h")
  - COLLECT_LOGS_DIR (default=./k8s-logs)
  - ENABLE_HELM_V3 (default=true)
  - HELM_INSTALL_TIMEOUT (default=5m0s)
  - HELM_RELEASE (default=${common.helm-chart-name}-release)
  - HELM_TEST (default=${common.helm-chart-name}-test)
  - HELM_TEST_TIMEOUT (default=5m0s)
  - HELM_VERSION (default="3.5.2")
  - K8S_NAMESPACE (default=${common.helm-chart-name}-${var.commithash})
  - KUBECONFIG (default=${env.HOME}/.kube/config)
  - BUILD_DIR (default=./build)
  - KAAS_INFO_FILE (default=${env.BUILD_DIR}/kaas-info.log)
  - HELM_HOOKS (default=true)
  - HELM_RELEASE_AUTO (default=${env.CHART_NAME}-staging)
  - HELM_TEST_AUTO (default=${env.CHART_NAME}-test)

  # Credentials
  - DOCKER_CONFIG (default=$HOME/.docker/config.json)
  - ERIDOC_USERNAME
  - ERIDOC_PASSWORD
  - GERRIT_USERNAME (default=ossadmin)
  - GERRIT_PASSWORD
  - GERRIT_CHANGE_NUMBER
  - JIRA_USERNAME
  - JIRA_PASSWORD
  - SELI_ARTIFACTORY_REPO_USER (default=)
  - SELI_ARTIFACTORY_REPO_PASS (default=)
  - AETHER_ARM_TOKEN
  - SERO_ARTIFACTORY_REPO_USER
  - SERO_ARTIFACTORY_REPO_PASS
  - FUNCTIONAL_USER_USERNAME (default=)
  - FUNCTIONAL_USER_PASSWORD (default=)
  - GIT_USERNAME (default=)
  - GIT_PASSWORD (default=)
  - FUNCTIONAL_USER_USERNAME (default=)
  - FUNCTIONAL_USER_PASSWORD (default=)
  - MUNIN_USERNAME (default=ossadmin)

  # Default docker image tags
  - ASCII_DOC_BUILDER_TAG (default=latest)
  - DOC_BUILDER_TAG (default=2.3.0-latest)
  - ELIB_MAKE_UTILITIES_TAG (default=latest)
  - HELM_DR_CHECK_TAG (default=latest)
  - HELM_KUBECTL_TAG (default=latest)
  - IMAGE_DR_CHECK_TAG (default=latest)
  - MVN_BUILDER_TAG (default=latest)
  - RELEASE_AUTO_TAG (default=latest)
  - BTH_LINTER_TAG (default=latest)

  # SonarQube
  - SONAR_AUTH_TOKEN
  - SONAR_HOST_URL
  - SONAR_BRANCH (default="master")

  # REST2HTML - Document Number of the REST Container file (The decimal class for a container is 190 89-)
  - REST2HTML_NUM (default="198 17-APR 201 618/1")

  # BTH Linter
  - OPEN_API_SPEC_DIRECTORY (default=src/main/resources/v1)

  # ADP Marketplace
  - ADP_PORTAL_API_KEY (default="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJtc2lkIjoiNjI3MTFjZjYyOGJiNTkwMDkxMjRlZWNmIiwiaW52YWxfc2VjcmV0IjoiYzg0cTZqOGR3OSJ9._Nz9HXsG7BpcnAy4PyE2WD02vy10fulHcwHRuvSKSQI")


  # FOSSA
  - FOSSA_ARTIFACT_HASH
  - FOSSA_API_KEY

  # BAZAAR
  - BAZAAR_USER (default=ossadmin)
  - BAZAAR_TOKEN

  # Pipeline Arguments
  - CHART_NAME
  - CHART_VERSION
  - CHART_REPO

  # MUNIN
  - MUNIN_TOKEN
  - RELEASE_CANDIDATE (default=${release-version})

# Variables, set by below tasks
var:
  - commithash
  - commithash-full
  - commit-author
  - commit-email
  - docker-config-basepath
  - image-registry
  - helm-chart-repo-internal
  - image-full-name-internal
  - image-repopath-internal
  - image-repopath-drop
  - pom-version
  - pom-version-old
  - rest2html-optional
  - revision
  - rstate
  - date
  - version
  - version-prefix
  - image-dr-vm-args
  - k8s-namespace
  - kaas-version
  - kaas-current-context
  - helm-tests
  - save-namespace
  - current-os-base-version
  - latest-os-base-version
  - helm-switches
  - idun-deployment
  - internal-chart-name
  - publish-condition
  - sha256-helm
  - sha256-image
  - sha256-initcontainer
  - pri_params

# Rules to execute
rules:

  # Integrated rule to execute everything locally (init-dev)
  release:
    - rule: clean
    - rule: init-dev
    - rule: lint
    - rule: build
    - rule: test
    - rule: image
    - rule: image-dr-check
    - rule: package
    - rule: package-jars
    - rule: k8s-test

  # Clean workspace
  clean:
    - task: rm
      cmd:
        - rm -rf .bob/
        - rm -rf build/
        - rm -rf k8s-logs/
        - rm -f artifact.properties
        - rm -f rest2html*.zip
        - rm -f rest_conversion_log.txt
        - rm -f src/main/resources/v1/*.zip
        - rm -f helm-install-dry-run.log
    - task: mvn-clean
      docker-image: adp-maven-builder
      docker-flags: &mvn-docker-flags
        - ${env.DOCKER_NETWORK}
        - "--env MAVEN_OPTS=${env.MAVEN_OPTS}"
        - "--env HOME=${env.HOME}"
        - "--volume /proj/mvn:/proj/mvn"
        - "--volume ${env.HOME}:${env.HOME}"
      cmd: mvn ${env.MAVEN_CLI_OPTS} clean

  # Common tasks for all init rules
  init-common:
    - task: version
      docker-image: adp-release-auto
      docker-flags:
        - "--env RELEASE"
      cmd: generate-version --is-release ${env.RELEASE} --output version
    - task: rstate
      docker-image: adp-release-auto
      cmd: get_rstate.py ${var.version} > .bob/var.rstate
    - task: date
      docker-image: adp-release-auto
      cmd: generate-date --output date
    - task: commit
      docker-image: adp-release-auto
      cmd:
        - git rev-parse --short HEAD > .bob/var.commithash
        - git rev-parse HEAD > .bob/var.commithash-full
        - git log -1 --format='%aN' > .bob/var.commit-author
        - git log -1 --format='%aE' > .bob/var.commit-email
    - task: update-pom-version
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags
      cmd:
        - mvn ${env.MAVEN_CLI_OPTS} help:evaluate -Dexpression=project.version -q -DforceStdout > .bob/var.pom-version-old
        - sed -i '0,/${var.pom-version-old}/s//${var.version}/' pom.xml
        - echo ${var.version} > .bob/var.pom-version
    - task: create-temp-dir
      cmd: mkdir -p ${env.BUILD_DIR}

  # Dev Tasks: only used by manually publishing development/black builds by developers
  init-dev:
    - rule: init-common
    - task: preliminary-revision # For example: PA1
      cmd: /bin/bash -c "RSTATE=${var.rstate} && echo P\${RSTATE:2}1 > .bob/var.revision"
    - task: image-repopath-internal
      cmd: echo "${image-dev-repopath}" | cut -f2- -d '/' > .bob/var.image-repopath-internal
    - task: image-registry
      cmd: echo "${image-dev-repopath}" | cut -f1 -d '/' > .bob/var.image-registry
    - task: image-full-name-internal
      cmd: echo "${image-dev-repopath}/${common.docker-image-name}" > .bob/var.image-full-name-internal
    - task: helm-chart-repo-internal
      cmd: echo "${helm-chart-dev-repopath}" > .bob/var.helm-chart-repo-internal
    - task: image-dr-vm-args
      cmd: echo " -DimageDesignRule.config.DR-D470203-041-A=disable -DimageDesignRule.config.DR-D470203-050-A=disable" > .bob/var.image-dr-vm-args
    - task: k8s-namespace
      cmd: echo "${env.K8S_NAMESPACE}-dev" > .bob/var.k8s-namespace

  # CI-Internal Tasks: used by CI to use as temporary storage for testing, only CI user has write access.
  init-precodereview:
    - rule: init-common
    - task: preliminary-revision # For example: PA1
      cmd: RSTATE=${var.rstate} && echo P${RSTATE:2}1 > .bob/var.revision
    - task: image-repopath-internal
      cmd: echo "${image-ci-repopath}" | cut -f2- -d '/' > .bob/var.image-repopath-internal
    - task: image-registry
      cmd: echo "${image-ci-repopath}" | cut -f1 -d '/' > .bob/var.image-registry
    - task: image-full-name-internal
      cmd: echo "${image-ci-repopath}/${common.docker-image-name}" > .bob/var.image-full-name-internal
    - task: helm-chart-repo-internal
      cmd: echo "${helm-chart-ci-repopath}" > .bob/var.helm-chart-repo-internal
    - task: image-dr-vm-args
      cmd: echo " -DimageDesignRule.config.DR-D470203-041-A=disable -DimageDesignRule.config.DR-D470203-050-A=disable" > .bob/var.image-dr-vm-args
    - task: k8s-namespace
      cmd: echo "${env.K8S_NAMESPACE}-precodereview${env.BUILD_NUMBER}" > .bob/var.k8s-namespace
    - task: get-current-os-base-version
      cmd: cat OS_BASE_VERSION > .bob/var.current-os-base-version

  # Release(PRA) level tasks: used by CI to initialize release version, publish artifacts after successful CI pipeline execution for a release build
  init-release:
    - rule: init-drop
    - task: set-release-version # change release version from - to + -> e.g. 1.1.50-1 to 1.1.50+1 - disabled
      cmd: /bin/bash -c "sed -i 's/-/-/g' .bob/var.version" # disabled for now, not changing

  # Drop level tasks: used by CI to publish artifacts after successful CI pipeline execution for a drop build
  init-drop:
    - rule: init-common
    - task: full-revision # For example: A (Note: The Letters I O P Q R W must never be used for Document Revisioning.
      cmd:
        - RSTATE=${var.rstate} && echo ${RSTATE:2} > .bob/var.revision
        - echo -cpi > .bob/var.rest2html-optional
    - task: image-repopath-internal
      cmd: echo "${image-ci-repopath}" | cut -f2- -d '/' > .bob/var.image-repopath-internal
    - task: image-repopath-drop
      cmd: echo "${image-drop-repopath}" | cut -f2- -d '/' > .bob/var.image-repopath-drop
    - task: image-registry
      cmd: echo "${image-ci-repopath}" | cut -f1 -d '/' > .bob/var.image-registry
    - task: image-full-name-internal
      cmd: echo "${image-ci-repopath}/${common.docker-image-name}" > .bob/var.image-full-name-internal
    - task: helm-chart-repo-internal
      cmd: echo "${helm-chart-ci-repopath}" > .bob/var.helm-chart-repo-internal
    - task: adp-artifacts-properties
      docker-image: adp-release-auto
      cmd: generate-adp-artifacts
        --chart-name ${common.helm-chart-name}
        --chart-version ${var.version}
        --chart-repo ${helm-chart-drop-repo}
        --image-name ${common.docker-image-name}
        --image-version ${var.version}
        --image-repo "${var.image-registry}/${var.image-repopath-drop}"
    - task: write-git-details
      cmd:
        - echo "GIT_TAG=$(git log -1 --pretty=format:'%h')" >> artifact.properties
        - echo "GIT_COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')" >> artifact.properties
        - echo "GIT_COMMIT_SUMMARY=$(git log -1 --pretty=format:'%s')" >> artifact.properties
    - task: image-dr-vm-args
      cmd: echo "" > .bob/var.image-dr-vm-args
    - task: k8s-namespace
      cmd: echo "${env.K8S_NAMESPACE}-drop${env.BUILD_NUMBER}" > .bob/var.k8s-namespace
    - task: get-current-os-base-version
      cmd: cat OS_BASE_VERSION > .bob/var.current-os-base-version

  lint:
    - task: markdownlint
      docker-image: adp-doc-builder
      cmd: bash -c 'markdownlint --config /etc/markdownlint-cli/adp.yaml $(git ls-files -- \*\.md | cat | xargs)' || true
    - task: vale
      docker-image: adp-doc-builder
      cmd: bash -c 'vale --output line --no-wrap $(git ls-files -- \*\.md | cat | xargs)' || true
    - task: helm
      docker-image: adp-helm-dr-check
      docker-flags:
        - "--env ENABLE_HELM_V3=true"
        - ${env.DOCKER_NETWORK}
      cmd: helm3 lint charts/${common.helm-chart-name}
    - task: helm-chart-check
      docker-image: adp-helm-dr-check
      cmd: helm-dr-check --helm-chart charts/${common.helm-chart-name} ${enabled-helm-design-rules} --helm-v3 --output .bob/
    - task: license-check
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags
      cmd: mvn ${env.MAVEN_CLI_OPTS} license:check -DskipTests=true
    - task: checkstyle
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags
      cmd: mvn ${env.MAVEN_CLI_OPTS} checkstyle:check -DskipTests=true
    - task: oas-bth-linter
      docker-image: bth-linter
      docker-flags:
        - "--env OPEN_API_SPEC_DIRECTORY=${env.OPEN_API_SPEC_DIRECTORY}"
        - "--env OUTPUT_DIRECTORY=.bob"
      cmd: /bth-linter.sh
    - task: metrics-check
      docker-image: adp-helm-kubectl
      cmd: python3 ./metricsChecker.py ./charts/${common.helm-chart-name}

  generate:
    - rule: rest-2-html
    - rule: generate-docs

  # Generate HTML output files from OpenAPI spec
  rest-2-html:
    - task: check-has-open-api-been-modified
      cmd:
        - if [ -z "$(git diff --name-status HEAD~ | grep src/main/resources/v1/eric-oss-cnr5gassist_.*-openapi.yaml)" ]; then
            echo "NO modifications have been made to the OpenAPI spec.";
            echo false > .bob/var.has-openapi-spec-been-modified;
          else
            echo "There HAS been modifications made to the OpenAPI spec.";
            echo true > .bob/var.has-openapi-spec-been-modified;
          fi
    - task: zip-open-api-doc
      docker-image: elib-make-utilities
      cmd:
        - ls -ltr src/main/resources/v1/
        - sh -c 'cd src/main/resources/v1/ && zip -r eric-oss-cnr5gassist-openapi.zip eric-oss-cnr5gassist_*-openapi.yaml'
        - ls -ltr src/main/resources/v1/
    - task: generate-html-output-files
      docker-image: elib-make-utilities
      cmd:
        - ls -ltr
        - /usr/src/elib/makerestc
           -inp src/main/resources/v1/eric-oss-cnr5gassist-openapi.zip
           -oud .
           -rev ${var.revision}
           -inf ${var.commit-email}
           -num ${env.REST2HTML_NUM}
           -cre ${var.commit-author}
           -app ${var.commit-author}
           -d
           ${var.rest2html-optional}
        - ls -ltr
        - cat rest_conversion_log.txt

  # Generate documents: cpi sdifs and raml hml doc
  generate-docs:
    - task: markdown-to-pdf
      docker-image: adp-release-auto
      cmd: 'doc-handler generate --config doc/handler-pdf-config.yaml
                                 --output ./build/doc/pdf
                                 --stylesheet doc/stylesheet/stylesheet.css
                                 --format pdf'
    # - task: asciidoc-to-sdif
    #  docker-image: adp-asciidoc-builder
    #  cmd: /adp_build_doc.sh --project-dir=${env.PWD} --build-dir=${env.PWD}/build
    - task: prepare-for-marketplace
      docker-image: adp-release-auto
      cmd: 'doc-handler generate --config doc/marketplace_config.yaml
                                 --output ./build/doc/html
                                 --format html
                                 --zip'

  # Upload zip package documents to ARM and refresh adp portal
  marketplace-upload-dev:
    - task: upload-doc-to-arm
      docker-image: adp-release-auto
      cmd: 'marketplace upload --arm-api-token ${env.SELI_ARTIFACTORY_REPO_PASS}
        --arm-url ${doc-arm-dev-repo}
        --config doc/marketplace_upload_dev_config.yaml
        --dev
        --debug
        --refresh
        --portal-token ${env.ADP_PORTAL_API_KEY}'

  marketplace-upload-release:
    - task: upload-doc-to-arm
      docker-image: adp-release-auto
      cmd: 'marketplace upload --arm-api-token ${env.SELI_ARTIFACTORY_REPO_PASS}
        --arm-url ${doc-arm-release-repo}
        --config doc/marketplace_upload_release_config.yaml
        --version ${release-version}
        --debug
        --refresh
        --portal-token ${env.ADP_PORTAL_API_KEY}'

  # Upload documents to EricDoc
  eridoc-upload-documents:
    # Upload documents to EriDoc
    - task: eridoc-upload
      docker-image: adp-release-auto
      docker-flags:
        - --env ERIDOC_USERNAME
        - --env ERIDOC_PASSWORD
      cmd: eridoc upload
        --config ./doc/Eridoc/eridoc_config.yaml
        --debug
        --no-validate-certificates
    # Approve uploaded documents in EriDoc
    - task: eridoc-approve
      docker-image: adp-release-auto
      docker-flags:
        - --env ERIDOC_USERNAME
        - --env ERIDOC_PASSWORD
      cmd: eridoc approve
        --config ./doc/Eridoc/eridoc_config.yaml
        --debug
        --no-validate-certificates

  # Build java source code and package jar file, no need image building at this stage
  build:
    - task: mvn-package
      docker-image: adp-maven-builder
      docker-flags: &mvn-docker-flags-with-creds
        - ${env.DOCKER_NETWORK}
        - "--env MAVEN_OPTS=${env.MAVEN_OPTS}"
        - "--env HOME=${env.HOME}"
        - "--volume ${env.HOME}:${env.HOME}"
        - "--volume /proj/mvn:/proj/mvn"
        - "--mount type=tmpfs,destination=/logcontrol"
        - "--env SELI_ARTIFACTORY_REPO_USER"
        - "--env SELI_ARTIFACTORY_REPO_PASS"
      cmd: mvn ${env.MAVEN_CLI_OPTS} clean install -DskipTests=true
    - rule: modification-check

  # Local Modification check
  modification-check:
    - task: check-for-any-local-modification
      cmd:
        - numberOfChanges="$(git status --porcelain |grep -c M)";
          if [[ $numberOfChanges == "0" ]]; then
            echo -e "\nNo local modifications have been made";
          elif [[ $numberOfChanges == "1" ]]; then
            echo -e "\nOnly pom version has been modified";
          else
            echo -e "\nUnexpected modifications have been made";
            echo "The local modified file(s) are";
            echo "";
            echo $numberOfChanges;
            git status --porcelain |grep M;
            echo "------------------------------------------------";
            echo -e "\nRun bob build and commit the changes";
            exit 1;
          fi

  # Run unit tests and jacoco coverage for SonarQube analysis
  test:
    - task: mvn-package
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags-with-creds
      cmd: mvn ${env.MAVEN_CLI_OPTS} clean install jacoco:prepare-agent surefire-report:report-only
    - task: move-report
      cmd: cp ${env.PWD}/target/site/surefire-report.html ${env.PWD}/.bob/surefire-report.html

  sonar-enterprise-pcr:
    - task: generate-version-prefix
      cmd: cat VERSION_PREFIX > .bob/var.version-prefix
    - task: mvn-sonar-enterprise-sonarqube-analysis
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags-with-creds
      cmd: mvn ${env.MAVEN_CLI_OPTS} sonar:sonar
        -Dsonar.login=${env.SONAR_AUTH_TOKEN}
        -Dsonar.host.url=${env.SONAR_HOST_URL}
        -Dsonar.pullrequest.key=${var.version-prefix}
        -Dsonar.pullrequest.base=${env.SONAR_BRANCH}
        -Dsonar.pullrequest.branch=${env.GERRIT_CHANGE_NUMBER}


  sonar-enterprise-release:
    - task: sonarqube-analysis
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags-with-creds
      cmd: mvn ${env.MAVEN_CLI_OPTS} sonar:sonar
        -Dsonar.login=${env.SONAR_AUTH_TOKEN}
        -Dsonar.host.url=${env.SONAR_HOST_URL}
        -Dsonar.projectVersion=${var.version}

  # Build a docker image pointing to dirty repository
  image:
    - task: docker-build
      cmd: docker build ${env.PWD} ${env.DOCKER_NETWORK}
        --file Dockerfile
        --tag ${var.image-full-name-internal}:${var.version}
        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        --build-arg COMMIT=${var.commithash}
        --build-arg APP_VERSION=${var.version}
        --build-arg JAR_FILE=eric-oss-cnr5gassist-${var.pom-version}.jar
        --build-arg RSTATE=${var.rstate}
        --build-arg IMAGE_PRODUCT_NUMBER=${common.image-product-number}
    - task: docker-build-test
      cmd: docker build ${env.PWD} ${env.DOCKER_NETWORK}
        --file ci/scripts/run_k6_end2end_dev.Dockerfile
        --tag ${var.image-full-name-internal}-test:${var.version}
    - task: image-push-internal
      cmd:
        - docker push ${var.image-full-name-internal}:${var.version}
        - docker push ${var.image-full-name-internal}-test:${var.version}

  # Delete docker images created
  delete-images:
    - task: delete-internal-image
      cmd: docker rmi ${var.image-full-name-internal}:${var.version} || true
    - task: delete-internal-test-image
      cmd: docker rmi ${var.image-full-name-internal}-test:${var.version} || true
    - task: delete-drop-image
      cmd: docker rmi ${image-full-name}:${var.version} || true
    - task: delete-drop-test-image
      cmd: docker rmi ${image-full-name}-test:${var.version} || true

  # Check for image design rule compliance
  image-dr-check:
    - task: check-image-dr
      docker-image: adp-image-dr-check
      docker-in-docker: socket
      cmd: "image-dr-check
          --image ${var.image-full-name-internal}:${var.version}
          --output .bob/check-image/
          ${var.image-dr-vm-args}"

  # Push image to ci-internal repo and create local version of helm chart
  package-local:
    - task: package-helm-internal
      docker-image: adp-release-auto
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env ENABLE_HELM_V3=true"
      cmd:
        - helm-package
          --folder charts/${common.helm-chart-name}
          --workdir .bob --output .bob/${common.helm-chart-name}-internal
          --version ${var.version}
          --replace "eric-product-info.yaml:VERSION=${var.version}"
          --replace "eric-product-info.yaml:REPO_PATH=${var.image-repopath-internal}"
          --replace "eric-product-info.yaml:IMAGE_NAME=${common.docker-image-name}"
          --replace RSTATE=${var.rstate}
        - helm-package
          --folder charts/${common.helm-chart-name}-test
          --workdir .bob --output .bob/${common.helm-chart-name}-test
          --version ${var.version}
          --replace "eric-product-info.yaml:VERSION=${var.version}"
          --replace "eric-product-info.yaml:REPO_PATH=${var.image-repopath-internal}"
          --replace "eric-product-info.yaml:IMAGE_NAME_TEST=${common.docker-image-name}-test"

  # Push image to ci-internal repo, create internal version of helm chart and pushes it to internal repo
  package:
    - rule: package-local
    - task: helm-upload-internal
      docker-image: adp-release-auto
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env ENABLE_HELM_V3=true"
      cmd:
        - upload_file.sh
          --filename=.bob/${common.helm-chart-name}-internal/${common.helm-chart-name}-${var.version}.tgz
          --repository=${var.helm-chart-repo-internal}/${common.helm-chart-name}
          --api-token="${env.SELI_ARTIFACTORY_REPO_PASS}"
        - upload_file.sh
          --filename=.bob/${common.helm-chart-name}-test/${common.helm-chart-name}-test-${var.version}.tgz
          --repository=${var.helm-chart-repo-internal}/${common.helm-chart-name}-test
          --api-token="${env.SELI_ARTIFACTORY_REPO_PASS}"

  package-jars:
    - task: mvn-upload-internal
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags-with-creds
      cmd: mvn ${env.MAVEN_CLI_OPTS} clean deploy -DskipTests=true

  k8s-test:
    - rule: helm-dry-run
    - rule: namespace-precheck
    - rule: create-namespace
    - rule: helm-install-prep
    - rule: helm-install
    - rule: healthcheck
    - rule: helm-test
    - rule: kaas-info
    - rule: delete-namespace

  helm-dry-run:
    - task: find-docker-config-basepath
      cmd: dirname ${env.DOCKER_CONFIG} > .bob/var.docker-config-basepath
    - task: helm-dry-run
      docker-image: adp-helm-kubectl
      docker-flags: &docker_flags_kube_config
        - ${env.DOCKER_NETWORK}
        - "--env HOME=${env.HOME}"
        - "--env K8S_NAMESPACE=${var.k8s-namespace}"
        - "--env KUBECONFIG=${env.KUBECONFIG}"
        - "--env ENABLE_HELM_V3"
        - "--env HELM_VERSION"
        - "--env SELI_ARTIFACTORY_REPO_USER"
        - "--env SELI_ARTIFACTORY_REPO_PASS"
        - "--env COLLECT_LOGS_SCRIPT_LOCATION"
        - "--volume ${env.PWD}:${env.PWD}"
        - "--volume ${env.HOME}:${env.HOME}"
        - "--volume ${env.KUBECONFIG}:${env.KUBECONFIG}"
        - "--volume ${var.docker-config-basepath}:${var.docker-config-basepath}"
      cmd: helm install .bob/${common.helm-chart-name}-internal/${common.helm-chart-name}-${var.version}.tgz
        --dry-run
        --debug
        --generate-name > helm-install-dry-run.log
    - task: helm-dry-run-deps
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: helm install charts/eric-oss-stub-runner
        --dry-run
        --debug
        --generate-name > helm-install-dry-run-deps.log

  namespace-precheck:
    - task: find-docker-config-basepath
      cmd: dirname ${env.DOCKER_CONFIG} > .bob/var.docker-config-basepath
    - task: find-all-namespaces
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl get ns ${var.k8s-namespace} | awk '{if($1=="${var.k8s-namespace}") print $1};' > .bob/var.save-namespace || true
    - task: delete-namespace
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl delete namespace ${var.save-namespace} || true

  create-namespace:
    - rule: namespace-precheck
    - task: find-docker-config-basepath
      cmd: dirname ${env.DOCKER_CONFIG} > .bob/var.docker-config-basepath
    - task: create-namespace
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl create namespace ${var.k8s-namespace}

  helm-install-prep:
    - task: find-docker-config-basepath
      cmd: dirname ${env.DOCKER_CONFIG} > .bob/var.docker-config-basepath
    - task: create-namespace-if-not-exists
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl create namespace ${var.k8s-namespace} || true
    - task: helm-install-prep
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl create secret generic ${image-secret}
        --from-file=.dockerconfigjson=${env.DOCKER_CONFIG}
        --type=kubernetes.io/dockerconfigjson
        --namespace ${var.k8s-namespace} || true

  helm-install:
    - rule: helm-install-prep
    - task: helm-install-or-upgrade-deps
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: helm upgrade
        --install ${env.HELM_RELEASE}-deps charts/eric-oss-stub-runner
        --namespace ${var.k8s-namespace}
        --set imageCredentials.pullSecret=${image-secret}
        --set credentials.username=${env.SELI_ARTIFACTORY_REPO_USER}
        --set credentials.password=${env.SELI_ARTIFACTORY_REPO_PASS}
        --timeout ${env.HELM_INSTALL_TIMEOUT}
        --wait
    - task: helm-install-or-upgrade
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: helm upgrade
        --install ${env.HELM_RELEASE} .bob/${common.helm-chart-name}-internal/${common.helm-chart-name}-${var.version}.tgz
        --namespace ${var.k8s-namespace}
        --set eric-log-shipper.logshipper.autodiscover.namespace=${var.k8s-namespace}
        --set imageCredentials.pullSecret=${image-secret}
        --set global.hosts.pf=eric-oss-stub-runner:8080
        --set global.schemes.pf=http
        --set integration.commonTopology.base-path=''
        --timeout ${env.HELM_INSTALL_TIMEOUT}
        --wait
    - task: helm-install-or-upgrade-test
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: helm upgrade
        --install ${env.HELM_RELEASE}-test .bob/${common.helm-chart-name}-test/${common.helm-chart-name}-test-${var.version}.tgz
        --namespace ${var.k8s-namespace}
        --set global.pullSecret=${image-secret}
        --set global.hosts.pf=eric-oss-stub-runner:8080
        --set service.instance=${env.HELM_RELEASE}
        --timeout ${env.HELM_INSTALL_TIMEOUT}
        --wait

  helm-install-long-va:
    - rule: helm-install-prep
    - task: helm-install-or-upgrade
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: helm upgrade
        --install ${env.HELM_RELEASE} .bob/${common.helm-chart-name}-internal/${common.helm-chart-name}-${var.version}.tgz
        --namespace ${var.k8s-namespace}
        --set eric-log-shipper.logshipper.autodiscover.namespace=${var.k8s-namespace}
        --set imageCredentials.pullSecret=${image-secret}
        --set global.hosts.pf=eric-oss-stub-runner:8080
        --set global.schemes.pf=http
        --set integration.commonTopology.base-path=''
        --set "additionalIngresses={defensics,owasp-zap}"
        --timeout ${env.HELM_INSTALL_TIMEOUT}
        --wait

  helm-install-kgb:
    - rule: helm-install-prep
    - task: prepare-helm-repo
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd:
        - helm repo add ${common.helm-chart-name} ${helm-chart-drop-repo} --username ${env.SELI_ARTIFACTORY_REPO_USER} --password ${env.SELI_ARTIFACTORY_REPO_PASS}
        - helm repo update
    - task: install-kgb-on-kubernetes
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: helm upgrade
        --install ${env.HELM_RELEASE} ${common.helm-chart-name}/${common.helm-chart-name}
        --namespace ${var.k8s-namespace}
        --set eric-log-shipper.logshipper.autodiscover.namespace=${var.k8s-namespace}
        --set imageCredentials.pullSecret=${image-secret}
        --timeout ${env.HELM_INSTALL_TIMEOUT}
        --wait
        --devel
    - rule: healthcheck

  helm-upgrade:
    - rule: helm-install-kgb
    - rule: helm-install

  healthcheck:
    - task: find-docker-config-basepath
      cmd: dirname ${env.DOCKER_CONFIG} > .bob/var.docker-config-basepath
    - task: healthcheck
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: ./healthcheck.sh

  helm-test:
    - task: install-on-kubernetes
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: helm test ${env.HELM_RELEASE}-test
        --namespace ${var.k8s-namespace}
        --timeout ${env.HELM_TEST_TIMEOUT}
    - rule: fetch-test-logs

  copy-report:
    - task: copy-report
      docker-image: adp-helm-kubectl
      docker-flags:
        - "--env HOME=${env.HOME}"
        - "--volume ${env.HOME}:${env.HOME}"
      cmd:
        - bash -c "sh ./ci/scripts/copy_k6_end2end_report_dev.sh ${env.KUBECONFIG} ${var.k8s-namespace} ."

  fetch-test-logs:
    - task: fetch-test-logs
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd:
        - bash -c "helm status -n ${var.k8s-namespace} ${env.HELM_RELEASE}-test -o json | jq -r '.hooks[] | select((.kind == \"Job\") and (.events[] | contains(\"test\"))) | .name' | tr '\n' ' ' > .bob/var.helm-tests"
        - bash -c "for i in ${var.helm-tests}; do echo \"Fetch Test LOG \$i\"; kubectl logs jobs/\$i -n ${var.k8s-namespace} || true; done"

  kaas-info:
    - task: get-kaas-info
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd:
        - kubectl get nodes -o=jsonpath='{.items[0].metadata.labels.kaas/version}' > .bob/var.kaas-version
        - kubectl config current-context > .bob/var.kaas-current-context
    - task: output-kaas-info
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd:
        - echo -e '# KaaS Version:' >> ${env.KAAS_INFO_FILE} >> ${env.KAAS_INFO_FILE}
        - kubectl get nodes -o=jsonpath='{.items[0].metadata.labels.kaas/version}' >> ${env.KAAS_INFO_FILE}
        - echo -e '\n\n# CCD Version:' >> ${env.KAAS_INFO_FILE} >> ${env.KAAS_INFO_FILE}
        - kubectl get nodes -o=jsonpath='{.items[0].metadata.labels.erikube/version}' >> ${env.KAAS_INFO_FILE}
        - echo -e '\n\n# KaaS Release Information:' >> ${env.KAAS_INFO_FILE}
        - echo -e "Ericsson Web Services - https://ews.rnd.gic.ericsson.se/cd.php?cluster=${var.kaas-current-context}" >> ${env.KAAS_INFO_FILE}
        - echo -e "KaaS release information - https://confluence.lmera.ericsson.se/display/AD/${var.kaas-version}" >> ${env.KAAS_INFO_FILE}
        - echo -e '\n# Kubectl Version:' >> ${env.KAAS_INFO_FILE}
        - kubectl version >> ${env.KAAS_INFO_FILE}
        - echo -e '\n# Kubectl Cluster Info:' >> ${env.KAAS_INFO_FILE} >> ${env.KAAS_INFO_FILE}
        - kubectl cluster-info | sed 's/\x1B\[[0-9;]\{1,\}[A-Za-z]//g' >> ${env.KAAS_INFO_FILE}
        - echo -e '\n# Kubectl Config Context:' >> ${env.KAAS_INFO_FILE} >> ${env.KAAS_INFO_FILE}
        - kubectl config get-contexts >> ${env.KAAS_INFO_FILE}
        - echo -e '\n# Helm Version:' >> ${env.KAAS_INFO_FILE}
        - helm version >> ${env.KAAS_INFO_FILE}

  delete-namespace:
    - task: find-docker-config-basepath
      cmd: dirname ${env.DOCKER_CONFIG} > .bob/var.docker-config-basepath
    - task: delete-release
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: helm delete ${env.HELM_RELEASE} --namespace ${var.k8s-namespace} || true
    - task: delete-namespace
      docker-image: adp-helm-kubectl
      docker-flags: *docker_flags_kube_config
      cmd: kubectl delete namespace ${var.k8s-namespace} --ignore-not-found=true

  # Prepare csar input files for being able to be packaged into the final csar
  # This task might be moved when final csar creation task is implemented
  csar-prep:
    - task: copy-template
      cmd: /bin/bash -c "cp -r ci/csar_template/** ci/csar/"
    - task: version2definition
      cmd: /bin/bash -c "sed -i 's/VERSION/${var.version}/g' ci/csar/Definitions/AppDescriptor.yaml"
    - task: version2otherdefinition
      cmd: /bin/bash -c "sed -i 's/VERSION/${var.version}/g' ci/csar/OtherDefinitions/ASD/${common.helm-chart-name}ASD.yaml"
    - task: include-openapi
      cmd: /bin/bash -c "cp -r src/main/resources/v1/eric-oss** ci/csar/OtherDefinitions/ASD/"


  pipeline:
    - rule: clean-stubs
    - rule: init-stubs
    - rule: lint-stubs
    - rule: build-stubs
    - rule: package-stubs
    - rule: test-stubs

  clean-stubs:
    - task: delete-tmp-folder
      cmd: rm -rf
        ./.aws/
        ./.bob/
        ./.kube/
        ./.cache/
        ./charts/*/charts/

  init-stubs:
    - rule: init-common-stubs
    - rule: get-deployment-info
    - rule: update-helm-chart
    - rule: update-repositories-yaml

  init-rollback:
    - rule: init-common-stubs
    - rule: get-deployment-info
    - task: update chart-revision
      cmd: gawk -i inplace '{if($1>0){print $1-1}else{print 0}}' ${var-revision}

  init-publish:
    - rule: init-common-stubs
    - rule: update-helm-chart

  init-common-stubs:
    - task: mkdir
      cmd: mkdir -p ./.aws/ ./.bob/ ./.kube/ ./.cache/
    - task: version
      docker-image: adp-release-auto
      cmd:
        - generate-version --is-release true --output version
        - sed -i -e s/\.dirty//g ./.bob/var.version
    - task: set internal-chart-name
      cmd: echo "${helm-chart-name}-staging" > ./.bob/var.internal-chart-name
    - task: set helm-switches
      cmd: if ${env.HELM_HOOKS}; then echo ""; else echo "--no-hooks"; fi > ./.bob/var.helm-switches
    - task: build-env-image
      cmd: docker build -t autoapp-py3kubehelmbuilder -f Dockerfile.env .

  update-helm-chart:
    - task: update-helm-version
      docker-image: bob-py3-kube-helm-builder
      cmd: yq -i -y '.version = "${var.version}"' ${chart-yml-path}
    - task: update-helm-dependency
      docker-image: bob-py3-kube-helm-builder
      cmd: yq ${yq-arguments} -i -y '(.dependencies[] | select (.name == $name)) |= . + {"version":$version,"repository":$repo}' ${chart-yml-path}
    - task: add-helm-dependency
      docker-image: bob-py3-kube-helm-builder
      cmd: yq ${yq-arguments} -i -y '.dependencies |= (. + [{"condition":($name+".enabled"),"name":$name,"repository":$repo,"version":$version}] | unique)' ${chart-yml-path}

  build-stubs:
    - task: mvn-package
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags-with-creds
      cmd: mvn ${env.MAVEN_CLI_OPTS} -Pstubs clean install

  update-repositories-yaml:
    - task: update-repositories-yaml
      cmd:
        - cp ./repositories.yaml ${env.HELMCONFIG}
        - sed -i -e s/FUNCTIONAL_USER_USERNAME/${env.FUNCTIONAL_USER_USERNAME}/g ${env.HELMCONFIG}
        - sed -i -e s/FUNCTIONAL_USER_PASSWORD/${env.FUNCTIONAL_USER_PASSWORD}/g ${env.HELMCONFIG}

  get-deployment-info:
    - task: get-helm-instances
      docker-image: bob-py3-kube-helm-builder
      docker-flags: *aws-credential-mount
      cmd:
        - /bin/bash -c "aws --region eu-west-1 eks get-token --cluster-name ${env.CLUSTER_NAME} > /dev/null 2>&1 || true"
        - /bin/bash -c "helm ls -A --output json > ${helm-instances}"
        - /bin/bash -c "jq '.[] | select(.chart|test(\"^eric-oss-common-base-([\\\\.\\\\d\\\\-+]+)\"))' ${helm-instances} > ${idun-instance-info}"
    - task: set chart-revision
      docker-image: bob-py3-kube-helm-builder
      cmd:
        - /bin/bash -c "jq '.[] | select(.name==\"${env.HELM_RELEASE_AUTO}\") | .revision | tonumber' ${helm-instances} > ${var-revision}"
        - /bin/bash -c "[ -s ${var-revision} ] || printf 0 > ${var-revision}"
    - task: set var.k8s-namespace
      docker-image: bob-py3-kube-helm-builder
      cmd: /bin/bash -c "jq -r .namespace ${idun-instance-info} > ./.bob/var.k8s-namespace"
    - task: set var.idun-deployment
      docker-image: bob-py3-kube-helm-builder
      cmd: /bin/bash -c "jq -r .name ${idun-instance-info} > ./.bob/var.idun-deployment"

  lint-stubs:
    - task: helm
      docker-image: adp-helm-dr-check
      cmd: helm3 lint charts/${helm-chart-name}
    - task: helm-chart-check
      docker-image: adp-helm-dr-check
      docker-flags: *docker-user-mount
      cmd:
        - helm3 dep update charts/${helm-chart-name} --repository-config ${env.HELMCONFIG}
        - /bin/bash -c "helm-dr-check --helm-chart charts/${helm-chart-name} --helm-v3 --output .bob/ || true"

  package-stubs:
    - task: package-local
      docker-image: adp-release-auto
      docker-flags: *docker-user-mount
      cmd: helm-package
        --helm-credentials ${env.HELMCONFIG}
        --folder charts/${helm-chart-name}
        --workdir .bob --output .bob/${var.internal-chart-name}
        --version ${var.version}
    - task: mvn-upload-internal
      docker-image: adp-maven-builder
      docker-flags: *mvn-docker-flags-with-creds
      cmd: mvn ${env.MAVEN_CLI_OPTS} -Pstubs clean deploy

  upgrade-stubs:
    - rule: get-global-values
    - task: helm-install-or-upgrade
      docker-image: bob-py3-kube-helm-builder
      docker-flags: *aws-credential-mount
      cmd: helm upgrade
        --install ${env.HELM_RELEASE_AUTO} .bob/${var.internal-chart-name}/${helm-chart-name}-${var.version}.tgz
        --namespace ${var.k8s-namespace}
        --set ${env.CHART_NAME}.enabled=true
        --set global.productStaging=true
        --values ${idun-instance-globals}
        --timeout ${env.HELM_INSTALL_TIMEOUT}
        --wait ${var.helm-switches}
        --atomic

  get-global-values:
    - task: get-global-values
      docker-image: custom-helm-install
      docker-flags: *aws-credential-mount
      cmd: /bin/bash -c "helm get values ${var.idun-deployment} -n ${var.k8s-namespace} -a | yq -y '${idun-instance-globals-regex}' > ${idun-instance-globals}"

  5gcnr-init-test:
    - rule: init-common-stubs
    - rule: 5gcnr-get-info

  5gcnr-get-info:
    - task: get-helm-instances
      docker-image: bob-py3-kube-helm-builder
      docker-flags: *aws-credential-mount
      cmd:
        - /bin/bash -c "aws --region eu-west-1 eks get-token --cluster-name ${env.CLUSTER_NAME} > /dev/null 2>&1 || true"
        - /bin/bash -c "helm ls -A --output json > ${helm-instances}"
        - /bin/bash -c "jq '.[] | select(.chart|test(\"^eric-oss-common-base-([\\\\.\\\\d\\\\-+]+)\"))' ${helm-instances} > ${idun-instance-info}"
    - task: set chart-revision
      docker-image: bob-py3-kube-helm-builder
      cmd:
        - /bin/bash -c "jq '.[] | select(.name==\"${env.HELM_RELEASE_AUTO}\") | .revision | tonumber' ${helm-instances} > ${var-revision}"
        - /bin/bash -c "[ -s ${var-revision} ] || printf 0 > ${var-revision}"
    - task: set var.k8s-namespace
      docker-image: bob-py3-kube-helm-builder
      cmd: /bin/bash -c "jq -r .namespace ${idun-instance-info} > ./.bob/var.k8s-namespace"
    - task: set var.idun-deployment
      docker-image: bob-py3-kube-helm-builder
      cmd: /bin/bash -c "jq -r .name ${idun-instance-info} > ./.bob/var.idun-deployment"

  5gcnr-k6-staging-test:
    - rule: get-global-values
    - task: helm-install-or-upgrade-and-run-test
      docker-image: bob-py3-kube-helm-builder
      docker-flags: *aws-credential-mount
      cmd:
        - helm upgrade
          --install ${env.HELM_TEST_AUTO} ${env.CHART_REPO}/${env.HELM_TEST_AUTO}/${env.HELM_TEST_AUTO}-${env.CHART_VERSION}.tgz
          --username ${env.FUNCTIONAL_USER_USERNAME}
          --password ${env.FUNCTIONAL_USER_PASSWORD}
          --namespace ${var.k8s-namespace}
          --set global.productStaging=true
          --set service.instance=${env.HELM_RELEASE_AUTO}
          --values ${idun-instance-globals}
          --wait
        - helm test ${env.HELM_TEST_AUTO}
          --namespace ${var.k8s-namespace}
          --timeout ${env.HELM_TEST_TIMEOUT}
    - task: fetch-test-logs
      docker-image: bob-py3-kube-helm-builder
      docker-flags: *aws-credential-mount
      cmd:
        - bash -c "helm status -n ${var.k8s-namespace} ${env.HELM_TEST_AUTO} -o json | jq -r '.hooks[] | select((.kind == \"Job\") and (.events[] | contains(\"test\"))) | .name' | tr '\n' ' ' > .bob/var.helm-tests"
        - bash -c "for i in ${var.helm-tests}; do echo \"Fetch Test LOG \$i\"; kubectl logs jobs/\$i -n ${var.k8s-namespace} || true; done"

  5gcnr-char-test:
    - task: characteristics-test
      docker-image: custom-helm-install
      docker-flags: *aws-credential-mount
      cmd: /bin/bash -c "cd ${eiap-utils-path}; python3 eiap_utils.py -ssv -d -kc "${env.KUBE_HOME}/config" --cfg default get-characteristics"

  rollback:
    - task: helm-rollback-or-delete
      docker-image: bob-py3-kube-helm-builder
      docker-flags: *aws-credential-mount
      cmd: /bin/bash -c "if [ ${var.revision} -gt 0 ]; then helm rollback ${env.HELM_RELEASE_AUTO} ${var.revision} --namespace ${var.k8s-namespace} --timeout ${env.HELM_INSTALL_TIMEOUT} --wait ${var.helm-switches}; else helm uninstall ${env.HELM_RELEASE_AUTO} --namespace ${var.k8s-namespace} --timeout ${env.HELM_INSTALL_TIMEOUT} --wait ${var.helm-switches}; fi"

  copy-testsuite-report:
    - task: copy-testsuite-report
      docker-image: bob-py3-kube-helm-builder
      docker-flags: *aws-credential-mount
      cmd:
        - bash -c "sh ./copy_report.sh ${env.KUBECONFIG} ${var.k8s-namespace} ."


  # Publish docker images and helm charts to drop repository
  # Call publish only when merged to master
  publish:
    - task: package-helm-public
      docker-image: adp-release-auto
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env ENABLE_HELM_V3=true"
      cmd:
        - helm-package
          --folder charts/${common.helm-chart-name}
          --workdir .bob --output build
          --version ${var.version}
          --replace "eric-product-info.yaml:VERSION=${var.version}"
          --replace "eric-product-info.yaml:REPO_PATH=${var.image-repopath-drop}"
          --replace "eric-product-info.yaml:IMAGE_NAME=${common.docker-image-name}"
          --replace RSTATE=${var.rstate}
        - helm-package
          --folder charts/${common.helm-chart-name}-test
          --workdir .bob --output build
          --version ${var.version}
          --replace "eric-product-info.yaml:VERSION=${var.version}"
          --replace "eric-product-info.yaml:REPO_PATH=${var.image-repopath-drop}"
          --replace "eric-product-info.yaml:IMAGE_NAME_TEST=${common.docker-image-name}-test"
    - task: helm-upload
      docker-image: adp-release-auto
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env ENABLE_HELM_V3=true"
      cmd:
        - upload_file.sh
          --filename=build/${common.helm-chart-name}-${var.version}.tgz
          --repository=${helm-chart-drop-repo}/${common.helm-chart-name}
          --api-token="${env.SELI_ARTIFACTORY_REPO_PASS}"
        - upload_file.sh
          --filename=build/${common.helm-chart-name}-test-${var.version}.tgz
          --repository=${helm-chart-drop-repo}/${common.helm-chart-name}-test
          --api-token="${env.SELI_ARTIFACTORY_REPO_PASS}"
    - rule: publish-oas
    - rule: publish-jars

  # Publish OpenAPI specs to Generic drop repository
  publish-oas:
    - task: upload-open-api-specs
      docker-image: adp-helm-kubectl
      docker-flags:
        - "--env OPEN_API_SPEC_DIRECTORY=${env.OPEN_API_SPEC_DIRECTORY}"
      cmd:
        bash -c 'for oas in ${env.OPEN_API_SPEC_DIRECTORY}/*openapi.yaml; do
        if [ -f $oas ]; then
        curl -X PUT -T $oas ${generic-drop-repo}-local/${common.helm-chart-name}/${var.version}/$(basename -- $oas) -u ${env.SELI_ARTIFACTORY_REPO_USER}:${env.SELI_ARTIFACTORY_REPO_PASS};
        fi
        done'

  publish-jars:
    - task: mvn-upload
      docker-image: adp-maven-builder
      docker-flags:
        - ${env.DOCKER_VOLUME_MAPPING_PASSWD}
        - "--volume /etc/ssh:/etc/ssh"
        - "--volume ${env.HOME}:${env.HOME}"
        - "--volume /proj/mvn:/proj/mvn"
        - ${env.DOCKER_NETWORK}
        - "--env SELI_ARTIFACTORY_REPO_USER"
        - "--env SELI_ARTIFACTORY_REPO_PASS"
        - "--env MAVEN_OPTS"
      cmd:
        - git checkout master
        - mvn ${env.MAVEN_CLI_OPTS} -Darguments="-DskipTests -Dmaven.javadoc.skip=true " clean deploy

  publish-images:
    - task: image-tag-public
      cmd:
        - docker tag ${var.image-full-name-internal}:${var.version} ${image-full-name}:${var.version}
        - docker tag ${var.image-full-name-internal}-test:${var.version} ${image-full-name}-test:${var.version}
    - task: image-push-public
      cmd:
        - docker push ${image-full-name}:${var.version}
        - docker push ${image-full-name}-test:${var.version}

  helm-chart-check-report-warnings:
    - task: helm-chart-check-report-warnings
      cmd:
        - if grep -q ">WARNING<" .bob/design-rule-check-report.xml; then
            echo true > .bob/var.helm-chart-check-report-warnings;
          else
            echo false > .bob/var.helm-chart-check-report-warnings;
          fi

  collect-k8s-logs:
    - task: collect-logs-using-script
      docker-image: adp-helm-kubectl
      docker-flags:
        - ${env.DOCKER_NETWORK}
        - "--env ENABLE_HELM_V3"
        - "--env HOME=${env.HOME}"
        - "--env K8S_NAMESPACE=${var.k8s-namespace}"
        - "--env KUBECONFIG=${env.KUBECONFIG}"
        - "--env HELM_VERSION"
        - "--env SERO_ARTIFACTORY_REPO_USER"
        - "--env SERO_ARTIFACTORY_REPO_PASS"
        - "--env COLLECT_LOGS_SCRIPT_LOCATION"
        - "--env COLLECT_LOGS_SCRIPT_FILE_NAME"
        - "--env COLLECT_LOGS_SINCE_RELATIVE_TIME"
        - "--env COLLECT_LOGS_DIR"
        - "--env HOME=${env.HOME}"
        - "--volume ${env.HOME}:${env.HOME}"
        - "--volume ${env.KUBECONFIG}:${env.KUBECONFIG}"
      cmd:
        - mkdir -p ${env.COLLECT_LOGS_DIR}
        - kubectl config view > ${env.COLLECT_LOGS_DIR}/kubectl.config
        - kubectl get ns > ${env.COLLECT_LOGS_DIR}/kubectl-get-ns.log
        - helm ls -Aa > ${env.COLLECT_LOGS_DIR}/helm-ls-Aa.log
        - printenv | grep -v CREDENTIALS | grep -v ARTIFACTORY > ${env.COLLECT_LOGS_DIR}/printenv.log
        - curl -u ${env.SERO_ARTIFACTORY_REPO_USER}:${env.SERO_ARTIFACTORY_REPO_PASS} ${env.COLLECT_LOGS_SCRIPT_LOCATION}/${env.COLLECT_LOGS_SCRIPT_FILE_NAME} > ${env.COLLECT_LOGS_DIR}/${env.COLLECT_LOGS_SCRIPT_FILE_NAME}
        - chmod 777 ${env.COLLECT_LOGS_DIR}/${env.COLLECT_LOGS_SCRIPT_FILE_NAME}
        - sh -c "cd ${env.COLLECT_LOGS_DIR} && ./${env.COLLECT_LOGS_SCRIPT_FILE_NAME} ${var.k8s-namespace} ${env.COLLECT_LOGS_SINCE_RELATIVE_TIME}"

  # fossa init stage
  fossa-init:
    - task: commit
      docker-image: adp-release-auto
      cmd: git rev-parse --short HEAD > .bob/var.commithash
    - task: fossa-init
      docker-image: adp-maven-builder
      docker-flags:
        - ${docker-params}
      cmd:
        fossa init --endpoint ${fossa-server-endpoint} --project ${fossa-project-name}

  # fossa analyze stage
  fossa-analyze:
    - task: fossa-analyze
      docker-image: adp-maven-builder
      docker-flags:
        - ${docker-params}
        - "--env FOSSA_API_KEY=${env.FOSSA_API_KEY}"
        - "--env MAVEN_OPTS=${env.MAVEN_OPTS}"
        - "--env HOME=${env.HOME}"
        - "--volume /proj/mvn:/proj/mvn"
        - "--volume ${env.HOME}:${env.HOME}"
      cmd:
        fossa analyze --revision ${var.version} --team ${fossa-team-name} --endpoint ${fossa-server-endpoint} --project ${fossa-project-name}

  # fossa scan status stage
  fossa-scan-status-check:
    - task: fossa-scan-status-check
      docker-image: adp-release-auto
      docker-flags:
        - "--env FOSSA_API_KEY=${env.FOSSA_API_KEY}"
      cmd: fossa_scan_status_check -s ${fossa-server-endpoint} -f custom -p ${fossa-project-name} -r ${var.version} -t ${env.FOSSA_API_KEY} -dl 15

  # New attribution format
  fetch-fossa-report-attribution:
    - task: fetch-fossa-report-attribution
      docker-image: adp-maven-builder
      docker-flags:
        - "--env FOSSA_API_KEY=${env.FOSSA_API_KEY}"
      cmd: fossa report attribution
        --endpoint ${fossa-server-endpoint}
        --project ${fossa-project-name}
        --revision ${var.version} --json > ${fossa-report-name}

  # This script will check in Bazaar for 3PP that are registered and listed in ${dependency-file-name}
  dependency-update:
    - task: dependency-update
      docker-image: adp-release-auto
      cmd: dependencies update
        --fossa-report ${fossa-report-name}
        --dependencies ${dependency-file-name}

  scan-bazaar:
    - task: scan-bazaar
      docker-image: adp-release-auto
      cmd: dependencies update
        --fossa-report ${fossa-report-name}
        --dependencies ${dependency-file-name}
        --scan-bazaar
        --bazaar-user ${env.BAZAAR_USER}
        --bazaar-token ${env.BAZAAR_TOKEN}
        --link-dependencies
        --sort

  # Check dependencies file validity
  dependency-validate:
    - task: dependency-validate
      docker-image: adp-release-auto
      cmd: dependencies validate
        --dependencies ${dependency-file-name}
        --allow-esw4 || true

  # Generate and validate License Agreement json file, it is uploaded in Marketplace upload documentations rule
  license-agreement:
    - task: generate
      docker-image: adp-release-auto
      cmd: license-agreement generate
            --dependencies ${dependency-file-name}
            --fossa-report ${fossa-report-name}
            --license-agreement ${common.manual-license-agreement-file-path}
            --output ${common.license-agreement-file-path-json}
    - task: validate
      docker-image: adp-release-auto
      cmd: license-agreement validate
            --license-agreement ${common.license-agreement-file-path-json}

  create-git-tag:
    - task: git-tag
      docker-image: adp-release-auto
      docker-flags:
        - "--env GERRIT_USERNAME"
        - "--env GERRIT_PASSWORD"
      cmd: version-handler create-git-tag
        --git-repo-url ${git-repo-url-http}
        --tag ${var.version}
        --message "Release ${var.version}"
        --commitid ${var.commithash}

  # update the OS base image and related java11
  common-base-update:
    - task: get-latest-version
      docker-image: adp-helm-kubectl
      cmd: bash -c "sh ./get-latest-common-base-version.sh ${env.SELI_ARTIFACTORY_REPO_USER} ${env.SELI_ARTIFACTORY_REPO_PASS}"
    - task: compare-current-to-latest
      cmd: echo "assume that latest is always newer because Spinnaker is triggered by common base upgrades"
    - task: update-current-to-latest
      cmd:
        - cp .bob/var.latest-os-base-version .bob/var.current-os-base-version
        - cp .bob/var.latest-os-base-version OS_BASE_VERSION
        - echo "OS BASE VERSION upgraded to:"
        - cat OS_BASE_VERSION

  apply-version:
    - task: apply-versions
      cmd: sed -i "s/OS_BASE_VERSION/${var.current-os-base-version}/" Dockerfile

  upload-cpi-fragment:
    - task: download-characteristics-report-json
      docker-image: adp-release-auto
      cmd: ci/scripts/arm_download_file.sh
        -a "${doc-arm-dev-repo}"
        -f "${common.characteristics-report-source-file-name}"
        -t "${env.SELI_ARTIFACTORY_REPO_PASS}"
        -l "${common.config-fragments}"
    - task: validate-license-agreement
      docker-image: adp-release-auto
      cmd: license-agreement validate
        --license-agreement ${common.license-agreement-file-path-json}
    - task: upload-license-agreement-json
      docker-image: adp-release-auto
      cmd: upload_file.sh
        -f ${common.license-agreement-file-path-json}
        -c "${doc-arm-release-repo}/documents/${release-version}/${common.license-agreement-dest-file-name}"
        -t "${env.SELI_ARTIFACTORY_REPO_PASS}"
        -o true
    - task: validate-service-ports-json
      docker-image: adp-release-auto
      cmd: service-ports validate
        -f ${common.service-ports-file-path}
    - task: upload-service-ports-json
      docker-image: adp-release-auto
      cmd: upload_file.sh
        -f "${common.service-ports-file-path}"
        -c "${doc-arm-release-repo}/documents/${release-version}/${common.service-ports-dest-file-name}"
        -t "${env.SELI_ARTIFACTORY_REPO_PASS}"
        -o true
    - task: validate-characteristics-report-json
      docker-image: adp-release-auto
      cmd: characteristics-report validate
        -f "${common.characteristics-report-source-file-path-release}"
    - task: generate-characteristics-report-pdf
      docker-image: adp-release-auto
      cmd:
        - mkdir -p ${common.characteristics-report-output-dir}
        - characteristics-report generate
          -f "${common.characteristics-report-source-file-path-release}"
          -out "${common.characteristics-report-output-dir}"
          -fm pdf
          --stylesheet doc/stylesheet/stylesheet.css
    - task: rename-characteristics-report-pdf
      cmd:
        - mv doc/target/generated-docs/characteristics_report/characteristics_report.pdf doc/target/generated-docs/characteristics_report/5GCNR_Assist_characteristics_report.pdf
    - task: upload-characteristics-report-json
      docker-image: adp-release-auto
      cmd: upload_file.sh
        -f "${common.characteristics-report-source-file-path-release}"
        -c "${doc-arm-release-repo}/documents/${release-version}/${common.characteristics-report-dest-file-name}"
        -t "${env.SELI_ARTIFACTORY_REPO_PASS}"
        -o true
    - task: validate-pm-metrics-json
      docker-image: adp-release-auto
      cmd: pm-metrics validate
        -sv 3.1
        -f ${common.pm-metrics-file-path}
    - task: upload-pm-metrics-json
      docker-image: adp-release-auto
      cmd: upload_file.sh
        -f "${common.pm-metrics-file-path}"
        -c "${doc-arm-release-repo}/documents/${release-version}/${common.pm-metrics-dest-file-name}"
        -t "${env.SELI_ARTIFACTORY_REPO_PASS}"
        -o true
    - task: generate-pm-metrics-md
      docker-image: adp-release-auto
      cmd: pm-metrics generate-markdown
        -sv 3.1
        --json "${common.pm-metrics-file-path}"
        --output "${common.pm-metrics-md-file-path}"

  upload-characteristics-report-dev:
    - task: validate-characteristics-report
      docker-image: adp-release-auto
      cmd: characteristics-report validate
        -f "${common.characteristics-report-source-file-path-dev}"
    - task: upload-characteristics-report
      docker-image: adp-release-auto
      cmd: upload_file.sh
        -f "${common.characteristics-report-source-file-path-dev}"
        -c "${doc-arm-dev-repo}/documents/${common.characteristics-report-dest-file-name}"
        -t "${env.AETHER_ARM_TOKEN}"
        -o true

  # Structure Data validate and upload
  structure-data:
    - task: structure-data-validate
      docker-image: adp-release-auto
      cmd: structure-data validate
        --file doc/${common.structure-data-file}
    - task: structure-data-upload
      docker-image: adp-release-auto
      cmd: structure-data upload
        --file doc/${common.structure-data-file}
        --url ${doc-arm-release-repo}/documents/${release-version}
        --token ${env.SELI_ARTIFACTORY_REPO_PASS}

  # Generate PRI document
  generate-pri:
    - task: output-dir
      cmd: mkdir -p build/pri
    - task: generate-pri-inputs
      docker-image: adp-release-auto
      docker-envs:
        - ERIDOC_USERNAME
        - ERIDOC_PASSWORD
      cmd:
        - munin-doc search
          --product-structure config/plms/product_structure.yaml
          --documents build/documents.yaml
          --pri-input build/pri/pri_input.json
          --version ${release-version}
          --set CBOS_VERSION=${var.current-os-base-version}
    - task: set-dummy-artifact-checksums
      cmd:
        - echo '0000000000000000000000000000000000000000000000000000000000000000' > .bob/var.sha256-helm
        - echo '0000000000000000000000000000000000000000000000000000000000000000' > .bob/var.sha256-image
        - echo '0000000000000000000000000000000000000000000000000000000000000000' > .bob/var.sha256-initcontainer
    - task: configure_pri_params
      cmd: echo "--dry-run" > .bob/var.pri_params
    - task: generate_version_prefix
      cmd: cat VERSION_PREFIX > .bob/var.version-prefix
    - task: generate-pri
      docker-image: adp-release-auto
      docker-envs:
        - GERRIT_USERNAME
        - GERRIT_PASSWORD
        - JIRA_USERNAME
        - JIRA_PASSWORD
        - ERIDOC_USERNAME
        - ERIDOC_PASSWORD
      cmd:
        - "pri2 
          --config \"config/plms/pri/1.8\"
          --product-release-number \"${release-version}\"
          --jira-component-long-name \"IDUN\"
          --gerrit-url \"${common.gerrit-url}\"
          --to-change \"${env.GERRIT_PATCHSET_REVISION}\"
          --release-report \"build/pri/pri_input.json\"
          --pri-manual-json \"config/plms/pri_manual_input.json\"
          --pri-config-extra \"config/plms/config_idun.json\"
          --eridoc-config \"config/plms/eridoc_config.yaml\"
          --eridoc-prepared \"${env.PRI_PREPARED}\"
          --eridoc-approver \"${env.PRI_PREPARED}\"
          --eridoc-responsible \"${env.PRI_RESPONSIBLE}\"
          --eridoc-set semver=${var.version-prefix}
          --product-revision ${var.version-prefix}
          --output-dir \"build/pri\"
          --checksum helm=\"${var.sha256-helm}\"
          --checksum image=\"${var.sha256-image}\"
          --checksum initcontainer_image=\"${var.sha256-initcontainer}\"
          --mimer
          --debug
          ${var.pri_params}
          "
    - task: rename-pri-pdf
      cmd:
        - mv build/pri/pri.pdf build/pri/5GCNR_Assist_PRI.pdf

  # Create product versions from product structure and FOSS dependencies
  munin-update-version:
    - task: validate-files
      docker-image: adp-release-auto
      cmd: munin validate
        -ps config/plms/product_structure.yaml
    - task: create-products
      docker-image: adp-release-auto
      cmd: munin create-versions -t $(<"${env.MUNIN_TOKEN}") -c config/plms/product_structure.yaml -v ${env.RELEASE_CANDIDATE}

  # Generate 3pp usage list from Munin
  generate-svl:
    - task: download-xlsx-file
      cmd:
        - mkdir -p ${common.svl-file-out-dir}
        - /bin/bash -c "python3 ${eiap-utils-path}/cicd_utils.py -ssv -t $(<"${env.MUNIN_TOKEN}") -u "${env.MUNIN_USERNAME}" get-mimer-svl -pn "${common.mimer-product-number}" -pv "${common.mimer-product-version}" -o '${common.svl-file-out-dir}/${common.svl-file-name}'"